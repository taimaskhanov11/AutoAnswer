from aiogram import Router, types, F
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.state import StatesGroup, State
from aiogram.utils import markdown as md

from autoanswer.apps.bot.callback_data.base_callback import TriggerCollectionCallback, TriggerCollectionAction, \
    Action
from autoanswer.apps.bot.markups.common import triggers_markups
from autoanswer.apps.bot.utils import part_sending
from autoanswer.apps.bot.utils.message import check_for_file
from autoanswer.db.models import User
from autoanswer.db.models.trigger import TriggerCollection

router = Router()

edit_text_answer = ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç!\n\n"
                    "–û—Ç–≤–µ—Ç–æ–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.\n"
                    "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ —Ç–µ–∫—Å—Ç—É.\n\n"
                    "–ß—Ç–æ–±—ã —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã:\n\n"
                    f"<–∂–∏—Ä>—Ç–µ–∫—Å—Ç</–∂–∏—Ä> - {md.bold('–∂–∏—Ä–Ω—ã–π')}\n"
                    f"<–∫—É—Ä>—Ç–µ–∫—Å—Ç</–∫—É—Ä> - {md.italic('–∫—É—Ä—Å–∏–≤')}\n"
                    # f"<–ø–æ–¥>—Ç–µ–∫—Å—Ç</–ø–æ–¥> - {md.underline('–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π')}\n"
                    f"<–ø–µ—Ä>—Ç–µ–∫—Å—Ç</–ø–µ—Ä> - {md.strikethrough('–ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π')}\n"
                    f"<–∫–æ–¥>—Ç–µ–∫—Å—Ç</–∫–æ–¥> - {md.code('–∫–æ–¥')}\n"
                    f"<—Å–∫—Ä>—Ç–µ–∫—Å—Ç</—Å–∫—Ä> - –°–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç\n\n"
                    "–ü—Ä–∏–º–µ—Ä:\n"
                    f"–¢–∞–∫ –¥–µ–ª–∞–µ—Ç—Å—è {md.bold('<–∂–∏—Ä>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</–∂–∏—Ä>')}\n\n")


class EditTriggerCollectionAnswer(StatesGroup):
    edit = State()


class EditTriggerCollectionDelay(StatesGroup):
    edit = State()


async def trigger_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤:", reply_markup=triggers_markups.get_trigger_menu())


async def get_trigger_collections(
        call: types.CallbackQuery,
        user: User,
        callback_data: TriggerCollectionCallback,
        state: FSMContext):
    await state.clear()
    triggers_coll = await user.get_trigger_collections()
    if not triggers_coll:
        await call.message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 –∞–∫–∫–∞—É–Ω—Ç.")
        return
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç:",
                              reply_markup=triggers_markups.get_trigger_collections(triggers_coll))


async def get_trigger_collection(
        call: types.CallbackQuery,
        callback_data: TriggerCollectionCallback,
        state: FSMContext,
        user: User):
    await state.clear()
    trigger_collection = await TriggerCollection.get_local_or_full(pk=callback_data.pk)
    await part_sending(call.message, trigger_collection.prettify,
                       reply_markup=triggers_markups.switch_trigger_collection_status(trigger_collection))

    # await call.message.answer(
    #     f"{trigger_collection}",
    #     reply_markup=triggers_markups.switch_trigger_collection_status(trigger_collection),
    # )


async def switch_trigger_collection_status(
        call: types.CallbackQuery,
        state: FSMContext,
        user: User,
        callback_data: TriggerCollectionCallback):
    await state.clear()
    trigger_coll = await TriggerCollection.get_local_or_full(pk=callback_data.pk)
    await trigger_coll.switch_status(callback_data.payload)
    # await call.message.edit_text(trigger_coll.prettify)
    await call.message.edit_reply_markup(triggers_markups.switch_trigger_collection_status(trigger_coll))


async def edit_trigger_collection(call: types.CallbackQuery,
                                  state: FSMContext,
                                  callback_data: TriggerCollectionCallback):
    await state.clear()
    trigger_coll = await TriggerCollection.get_local_or_full(pk=callback_data.pk)
    await call.message.edit_reply_markup(triggers_markups.edit_trigger_collection(trigger_coll))
    # await call.message.answer(
    #     "‚úèÔ∏è –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞\n\n"
    #     f"{trigger_coll.triggers_prettify}\n"
    #     f"{md.bold('–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ')}\n"
    #     f"{md.code(trigger_coll.answer_to_all_messages)}\n"
    #     ,
    #     reply_markup=triggers_markups.edit_trigger_collection(trigger_coll),
    # )


async def edit_trigger_collection_answer(
        call: types.CallbackQuery,
        state: FSMContext,
        callback_data: TriggerCollectionCallback):
    await state.clear()
    await state.update_data(trigger_collection_answer_pk=callback_data.pk)
    await call.message.answer(edit_text_answer, reply_markup=types.ReplyKeyboardRemove())

    await state.set_state(EditTriggerCollectionAnswer.edit)


async def edit_trigger_collection_answer_done(
        message: types.Message,
        state: FSMContext):
    answer, file_name = await check_for_file(message)
    data = await state.get_data()
    pk = data.get('trigger_collection_answer_pk')
    trigger_coll = await TriggerCollection.get_local_or_full(pk)

    trigger_coll.answer_to_all_messages = answer
    trigger_coll.file_name = file_name
    await trigger_coll.save(update_fields=['answer_to_all_messages', 'file_name'])

    await state.clear()
    await message.answer("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω ‚úÖ\n\n"
                         f"{trigger_coll.prettify}",
                         reply_markup=triggers_markups.switch_trigger_collection_status(trigger_coll))


async def edit_trigger_collection_delay(
        call: types.CallbackQuery,
        state: FSMContext,
        callback_data: TriggerCollectionCallback):
    await state.clear()
    await state.update_data(trigger_collection_answer_pk=callback_data.pk)
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.\n",
                              reply_markup=types.ReplyKeyboardRemove())

    await state.set_state(EditTriggerCollectionDelay.edit)


async def edit_trigger_collection_delay_done(
        message: types.Message,
        state: FSMContext, ):
    data = await state.get_data()
    pk = data.get('trigger_collection_answer_pk')
    trigger_coll = await TriggerCollection.get_local_or_full(pk)
    await trigger_coll.set_delay_before_answer(int(message.text))
    await state.clear()
    await message.answer("–ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ\n\n"
                         f"{trigger_coll.prettify}",
                         reply_markup=triggers_markups.switch_trigger_collection_status(trigger_coll))


def register_trigger_menu(dp: Router):
    dp.include_router(router)

    callback = router.callback_query.register
    message = router.message.register

    message(trigger_menu, text_startswith="‚öô", state="*")

    callback(get_trigger_collections,
             TriggerCollectionCallback.filter(F.action == Action.all),
             state="*")

    callback(get_trigger_collection,
             TriggerCollectionCallback.filter(F.action == Action.view),
             state="*")

    callback(switch_trigger_collection_status,
             TriggerCollectionCallback.filter(F.action == TriggerCollectionAction.switch),
             state="*")

    callback(edit_trigger_collection,
             TriggerCollectionCallback.filter(F.action == Action.edit),
             state="*")

    callback(edit_trigger_collection_answer,
             TriggerCollectionCallback.filter(F.action == TriggerCollectionAction.edit_answer_to_all_messages),
             state="*")
    message(edit_trigger_collection_answer_done, state=EditTriggerCollectionAnswer.edit)

    callback(edit_trigger_collection_delay,
             TriggerCollectionCallback.filter(F.action == TriggerCollectionAction.edit_delay_before_answer),
             state="*")
    message(edit_trigger_collection_delay_done, state=EditTriggerCollectionDelay.edit)
