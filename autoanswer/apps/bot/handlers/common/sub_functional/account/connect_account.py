import asyncio
from asyncio import Queue

from aiogram import types, Router, F
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.utils import markdown as md
from loguru import logger

from autoanswer.apps.bot.callback_data.base_callback import AccountCallback, AccountAction
from autoanswer.apps.bot.markups.admin import admin_markups
from autoanswer.apps.bot.markups.common import common_markups, accounts_markups
from autoanswer.apps.bot.temp import controller_codes_queue, controllers
from autoanswer.apps.controller.controller import ConnectAccountController
from autoanswer.db.models import User, Account
from autoanswer.loader import _

router = Router()


class ConnectAccount(StatesGroup):
    api = State()
    code = State()


class UnlinkAccount(StatesGroup):
    unbind = State()


link = md.link("—Å—Å—ã–ª–∫–µ", "https://my.telegram.org/auth?to=apps ")


async def connect_account(call: types.CallbackQuery, user: User, state: FSMContext):
    await state.clear()
    await user.fetch_related("accounts")
    if len(user.accounts) >= 3:
        await call.message.answer(_("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ–ª–µ–µ 3 –∞–∫–∫–∞—É–Ω—Ç–æ–≤"))
        return

    await call.message.answer(_(
        f"‚ñ´Ô∏è –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ üëâüèª {link}\n\n"
        "‚ñ´Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞—Ç–µ–º –∫–æ–¥) \n\n"
        "‚ñ´Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π api_id –∏ api_hash.\n\n"
        "Ô∏è‚ñ´Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ë–û–¢—É —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ api_id:api_hash:–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. \n\n‚ÑπÔ∏è –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "123445:asdf31234fads:79622231741 \n\n üö´ –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–ú –ø–æ–¥–∫–ª—é—á–∞—Ç—å:\n"
        "- –ù–æ–≤–æ—Ä–µ–≥–∏ (–Ω–µ–¥–∞–≤–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã);\n"
        "- –ê–∫–∫–∞—É–Ω—Ç—ã —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º.\n"
        "–¢–∞–∫–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø–æ–ª—É—á–∞—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç Telegram."
    ), reply_markup=common_markups.back())
    await state.set_state(ConnectAccount.api)


async def connect_account_phone(message: types.Message, user: User, state: FSMContext):
    try:
        api_id, api_hash, phone = tuple(map(lambda x: x.strip(), message.text.split(":")))

        account = await Account.get_or_none(api_id=api_id)
        if account:
            await message.answer(_("–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"))
            await state.clear()
            return

        logger.info(f"{user.username}| –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ {api_id}|{api_hash}|{phone}")
        controller = ConnectAccountController(
            owner=user,
            phone=phone,
            api_id=api_id,
            api_hash=api_hash
        )
        controller_codes_queue[user.user_id] = Queue(maxsize=1)
        asyncio.create_task(controller.start())
        await state.set_state(ConnectAccount.code)
        await message.answer(_("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¢–µ–ª–µ–≥—Ä–∞–º–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º code, "
                               f"–≤ —Ç–æ–ª—å–∫–æ —Ç–∞–∫–æ–º –≤–∏–¥–µ: {md.code('code<–≤–∞—à –∫–æ–¥>')}.\n"
                               f"–ù–∞–ø—Ä–∏–º–µ—Ä: {md.code('code43123')}\n"
                               "–ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã —Ç–æ —Ç–≥ –æ–±–Ω—É–ª–∏—Ç –∫–æ–¥\n"))
    except Exception as e:
        logger.critical(e)
        await message.answer(_("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥"))


async def connect_account_code(message: types.Message, user: User, state: FSMContext):
    code = message.text
    if code.isdigit():
        await message.answer(_(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–¥.\n"
                               f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Å –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ "
                               f"–∫–æ–¥ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º code –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ –Ω–∏–∂–µ\n"
                               f"–ù–∞–ø—Ä–∏–º–µ—Ä: {md.code('code43123')}"),
                             reply_markup=admin_markups.back())
        await state.clear()
        return
    code = message.text.replace("code", "").strip()
    queue = controller_codes_queue.get(user.user_id)
    queue.put_nowait(code)
    await message.answer(
        _("–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ –í–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç."))
    await state.clear()


async def unbind_account(
        call: types.CallbackQuery,
        callback_data: AccountCallback,
        user: User,
        state: FSMContext):
    await state.update_data(account_pk=callback_data.pk)
    await call.message.answer("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?",
                              reply_markup=accounts_markups.unbind_account())
    await state.set_state(UnlinkAccount.unbind)


async def unbind_account_done(
        call: types.CallbackQuery,
        user: User,
        state: FSMContext):
    if call.data == "yes":
        data = await state.get_data()
        account = await Account.get_or_none(pk=data["account_pk"])
        if account:
            await account.delete()
            if controller := controllers.get(account.api_id):
                await controller.stop()
            await call.message.answer(_("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω"))
        else:
            await call.message.answer(_("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"))
    else:
        await call.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()


def register_connect_account(dp: Router):
    dp.include_router(router)

    callback = router.callback_query.register
    message = router.message.register

    callback(connect_account, AccountCallback.filter(F.action == AccountAction.bind))
    message(connect_account_phone, state=ConnectAccount.api)
    message(connect_account_code, state=ConnectAccount.code)

    callback(unbind_account, AccountCallback.filter(F.action == AccountAction.unbind))
    callback(unbind_account_done, state=UnlinkAccount.unbind)
